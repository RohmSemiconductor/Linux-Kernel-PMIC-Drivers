From 82d7983619196f841871cfd7a5db3a2b72a8312b Mon Sep 17 00:00:00 2001
From: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
Date: Wed, 14 Nov 2018 13:29:57 +0200
Subject: [PATCH 24/27] regulator: bd718x7: Disallow SW control for critical
 regulators

BD718x7 has a HW 'feature' which leaves regulators with SEL-bit
enabled (SW-control) disabled when transitioning from poweroff
to SNVS state. In other words - if any critical regulator has
been controlled by SW (enable/disable control) - it will stay
OFF if we go to SNVS state. SNVS is usually a nice idea with
i.MX8. So this change is required before we can enable SNVS
as a state to go after reset.

If SW control for crucial regulators is needed - then we
must not use SNVS. Sorry.

In default setup this means that all other regulators except
buck3 and buck4 (GPU and VDU power) on BD71837 must not be
controlled by SW.

Buck 1 and 2 support DVS - Eg voltage can be changed when buck
is enabled. So voltage change can be supported for those.
As said - BD71837 buck 3 and 4 aren't crucial for boot so we
can provide full control to those - if HW leaves them shut down
after SNVS transition then linux can enable them again at boot.*

*NOTE: bd718x7 driver is _not_ enabling/disabling buck3/buck4
in suspend/resume callbacks. If this is wanted we can implement
it in this driver or leave it for driver which uses the regulator
APIs and controls buck states for other power saving use-cases
(galcore that is?).

Signed-off-by: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
---
 drivers/regulator/bd718x7-regulator.c | 290 ++++------------------------------
 1 file changed, 35 insertions(+), 255 deletions(-)

diff --git a/drivers/regulator/bd718x7-regulator.c b/drivers/regulator/bd718x7-regulator.c
index a90dae120726..90e5292a3d49 100644
--- a/drivers/regulator/bd718x7-regulator.c
+++ b/drivers/regulator/bd718x7-regulator.c
@@ -56,87 +56,48 @@ static int bd718xx_buck1234_set_ramp_delay(struct regulator_dev *rdev,
 				  BUCK_RAMPRATE_MASK, ramp_value << 6);
 }
 
-/* Bucks 1 to 4 support DVS. PWM mode is used when voltage is changed.
- * Bucks 5 to 8 and LDOs can use PFM and must be disabled when voltage
- * is changed. Hence we return -EBUSY for these if voltage is changed
- * when BUCK/LDO is enabled.
- */
-static int bd718xx_set_voltage_sel_restricted(struct regulator_dev *rdev,
-						    unsigned int sel)
-{
-	if (regulator_is_enabled_regmap(rdev))
-		return -EBUSY;
-
-	return regulator_set_voltage_sel_regmap(rdev, sel);
-}
-
-static int bd718xx_set_voltage_sel_pickable_restricted(
-		struct regulator_dev *rdev, unsigned int sel)
-{
-	if (regulator_is_enabled_regmap(rdev))
-		return -EBUSY;
-
-	return regulator_set_voltage_sel_pickable_regmap(rdev, sel);
-}
-
 static struct regulator_ops bd718xx_pickable_range_ldo_ops = {
-	.enable = regulator_enable_regmap,
-	.disable = regulator_disable_regmap,
-	.is_enabled = regulator_is_enabled_regmap,
 	.list_voltage = regulator_list_voltage_pickable_linear_range,
-	.set_voltage_sel = bd718xx_set_voltage_sel_pickable_restricted,
 	.get_voltage_sel = regulator_get_voltage_sel_pickable_regmap,
 };
 
 static struct regulator_ops bd718xx_pickable_range_buck_ops = {
-	.enable = regulator_enable_regmap,
-	.disable = regulator_disable_regmap,
-	.is_enabled = regulator_is_enabled_regmap,
 	.list_voltage = regulator_list_voltage_pickable_linear_range,
-	.set_voltage_sel = bd718xx_set_voltage_sel_pickable_restricted,
 	.get_voltage_sel = regulator_get_voltage_sel_pickable_regmap,
 	.set_voltage_time_sel = regulator_set_voltage_time_sel,
 };
 
 static struct regulator_ops bd718xx_ldo_regulator_ops = {
-	.enable = regulator_enable_regmap,
-	.disable = regulator_disable_regmap,
-	.is_enabled = regulator_is_enabled_regmap,
 	.list_voltage = regulator_list_voltage_linear_range,
-	.set_voltage_sel = bd718xx_set_voltage_sel_restricted,
 	.get_voltage_sel = regulator_get_voltage_sel_regmap,
 };
 
 static struct regulator_ops bd718xx_ldo_regulator_nolinear_ops = {
-	.enable = regulator_enable_regmap,
-	.disable = regulator_disable_regmap,
-	.is_enabled = regulator_is_enabled_regmap,
 	.list_voltage = regulator_list_voltage_table,
-	.set_voltage_sel = bd718xx_set_voltage_sel_restricted,
 	.get_voltage_sel = regulator_get_voltage_sel_regmap,
 };
 
 static struct regulator_ops bd718xx_buck_regulator_ops = {
-	.enable = regulator_enable_regmap,
-	.disable = regulator_disable_regmap,
-	.is_enabled = regulator_is_enabled_regmap,
 	.list_voltage = regulator_list_voltage_linear_range,
-	.set_voltage_sel = bd718xx_set_voltage_sel_restricted,
 	.get_voltage_sel = regulator_get_voltage_sel_regmap,
 	.set_voltage_time_sel = regulator_set_voltage_time_sel,
 };
 
 static struct regulator_ops bd718xx_buck_regulator_nolinear_ops = {
-	.enable = regulator_enable_regmap,
-	.disable = regulator_disable_regmap,
-	.is_enabled = regulator_is_enabled_regmap,
 	.list_voltage = regulator_list_voltage_table,
-	.set_voltage_sel = bd718xx_set_voltage_sel_restricted,
 	.get_voltage_sel = regulator_get_voltage_sel_regmap,
 	.set_voltage_time_sel = regulator_set_voltage_time_sel,
 };
 
-static struct regulator_ops bd718xx_dvs_buck_regulator_ops = {
+static struct regulator_ops bd718xx_dvs_buck12_regulator_ops = {
+	.list_voltage = regulator_list_voltage_linear_range,
+	.set_voltage_sel = regulator_set_voltage_sel_regmap,
+	.get_voltage_sel = regulator_get_voltage_sel_regmap,
+	.set_voltage_time_sel = regulator_set_voltage_time_sel,
+	.set_ramp_delay = bd718xx_buck1234_set_ramp_delay,
+};
+
+static struct regulator_ops bd71837_dvs_buck34_regulator_ops = {
 	.enable = regulator_enable_regmap,
 	.disable = regulator_disable_regmap,
 	.is_enabled = regulator_is_enabled_regmap,
@@ -318,7 +279,6 @@ struct reg_init {
 };
 struct bd718xx_regulator_data {
 	struct regulator_desc desc;
-	const struct reg_init init;
 	const struct reg_init *additional_inits;
 	int additional_init_amnt;
 };
@@ -332,7 +292,22 @@ struct bd718xx_regulator_data {
  * monitoring to errorneously detect under voltage and force PMIC to
  * emergency state instead of poweroff. In order to avoid this we
  * disable voltage monitoring for LDO5 and LDO6
- */
+ */	
+static const struct reg_init bd71837_buck3_inits[] = {
+	{
+		.reg = BD71837_REG_BUCK3_CTRL,
+		.mask = BD718XX_BUCK_SEL,
+		.val = BD718XX_BUCK_SEL,
+	},
+};
+static const struct reg_init bd71837_buck4_inits[] = {
+	{
+		.reg = BD71837_REG_BUCK4_CTRL,
+		.mask = BD718XX_BUCK_SEL,
+		.val = BD718XX_BUCK_SEL,
+	},
+};
+
 static const struct reg_init bd71837_ldo5_inits[] = {
 	{
 		.reg = BD718XX_REG_MVRFLTMASK2,
@@ -356,7 +331,7 @@ static const struct bd718xx_regulator_data bd71847_regulators[] = {
 			.of_match = of_match_ptr("BUCK1"),
 			.regulators_node = of_match_ptr("regulators"),
 			.id = BD718XX_BUCK1,
-			.ops = &bd718xx_dvs_buck_regulator_ops,
+			.ops = &bd718xx_dvs_buck12_regulator_ops,
 			.type = REGULATOR_VOLTAGE,
 			.n_voltages = BD718XX_DVS_BUCK_VOLTAGE_NUM,
 			.linear_ranges = bd718xx_dvs_buck_volts,
@@ -364,15 +339,8 @@ static const struct bd718xx_regulator_data bd71847_regulators[] = {
 				ARRAY_SIZE(bd718xx_dvs_buck_volts),
 			.vsel_reg = BD718XX_REG_BUCK1_VOLT_RUN,
 			.vsel_mask = DVS_BUCK_RUN_MASK,
-			.enable_reg = BD718XX_REG_BUCK1_CTRL,
-			.enable_mask = BD718XX_BUCK_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_BUCK1_CTRL,
-			.mask = BD718XX_BUCK_SEL,
-			.val = BD718XX_BUCK_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -380,22 +348,15 @@ static const struct bd718xx_regulator_data bd71847_regulators[] = {
 			.of_match = of_match_ptr("BUCK2"),
 			.regulators_node = of_match_ptr("regulators"),
 			.id = BD718XX_BUCK2,
-			.ops = &bd718xx_dvs_buck_regulator_ops,
+			.ops = &bd718xx_dvs_buck12_regulator_ops,
 			.type = REGULATOR_VOLTAGE,
 			.n_voltages = BD718XX_DVS_BUCK_VOLTAGE_NUM,
 			.linear_ranges = bd718xx_dvs_buck_volts,
 			.n_linear_ranges = ARRAY_SIZE(bd718xx_dvs_buck_volts),
 			.vsel_reg = BD718XX_REG_BUCK2_VOLT_RUN,
 			.vsel_mask = DVS_BUCK_RUN_MASK,
-			.enable_reg = BD718XX_REG_BUCK2_CTRL,
-			.enable_mask = BD718XX_BUCK_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_BUCK2_CTRL,
-			.mask = BD718XX_BUCK_SEL,
-			.val = BD718XX_BUCK_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -414,15 +375,8 @@ static const struct bd718xx_regulator_data bd71847_regulators[] = {
 			.vsel_range_reg = BD718XX_REG_1ST_NODVS_BUCK_VOLT,
 			.vsel_range_mask = BD71847_BUCK3_RANGE_MASK,
 			.linear_range_selectors = bd71847_buck3_volt_range_sel,
-			.enable_reg = BD718XX_REG_1ST_NODVS_BUCK_CTRL,
-			.enable_mask = BD718XX_BUCK_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_1ST_NODVS_BUCK_CTRL,
-			.mask = BD718XX_BUCK_SEL,
-			.val = BD718XX_BUCK_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -436,20 +390,13 @@ static const struct bd718xx_regulator_data bd71847_regulators[] = {
 			.linear_ranges = bd71847_buck4_volts,
 			.n_linear_ranges =
 				ARRAY_SIZE(bd71847_buck4_volts),
-			.enable_reg = BD718XX_REG_2ND_NODVS_BUCK_CTRL,
 			.vsel_reg = BD718XX_REG_2ND_NODVS_BUCK_VOLT,
 			.vsel_mask = BD71847_BUCK4_MASK,
 			.vsel_range_reg = BD718XX_REG_2ND_NODVS_BUCK_VOLT,
 			.vsel_range_mask = BD71847_BUCK4_RANGE_MASK,
 			.linear_range_selectors = bd71847_buck4_volt_range_sel,
-			.enable_mask = BD718XX_BUCK_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_2ND_NODVS_BUCK_CTRL,
-			.mask = BD718XX_BUCK_SEL,
-			.val = BD718XX_BUCK_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -463,15 +410,8 @@ static const struct bd718xx_regulator_data bd71847_regulators[] = {
 			.n_voltages = ARRAY_SIZE(bd718xx_3rd_nodvs_buck_volts),
 			.vsel_reg = BD718XX_REG_3RD_NODVS_BUCK_VOLT,
 			.vsel_mask = BD718XX_3RD_NODVS_BUCK_MASK,
-			.enable_reg = BD718XX_REG_3RD_NODVS_BUCK_CTRL,
-			.enable_mask = BD718XX_BUCK_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_3RD_NODVS_BUCK_CTRL,
-			.mask = BD718XX_BUCK_SEL,
-			.val = BD718XX_BUCK_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -487,15 +427,8 @@ static const struct bd718xx_regulator_data bd71847_regulators[] = {
 				ARRAY_SIZE(bd718xx_4th_nodvs_buck_volts),
 			.vsel_reg = BD718XX_REG_4TH_NODVS_BUCK_VOLT,
 			.vsel_mask = BD718XX_4TH_NODVS_BUCK_MASK,
-			.enable_reg = BD718XX_REG_4TH_NODVS_BUCK_CTRL,
-			.enable_mask = BD718XX_BUCK_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_4TH_NODVS_BUCK_CTRL,
-			.mask = BD718XX_BUCK_SEL,
-			.val = BD718XX_BUCK_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -513,15 +446,8 @@ static const struct bd718xx_regulator_data bd71847_regulators[] = {
 			.vsel_range_reg = BD718XX_REG_LDO1_VOLT,
 			.vsel_range_mask = BD718XX_LDO1_RANGE_MASK,
 			.linear_range_selectors = bd718xx_ldo1_volt_range_sel,
-			.enable_reg = BD718XX_REG_LDO1_VOLT,
-			.enable_mask = BD718XX_LDO_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_LDO1_VOLT,
-			.mask = BD718XX_LDO_SEL,
-			.val = BD718XX_LDO_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -535,15 +461,8 @@ static const struct bd718xx_regulator_data bd71847_regulators[] = {
 			.vsel_reg = BD718XX_REG_LDO2_VOLT,
 			.vsel_mask = BD718XX_LDO2_MASK,
 			.n_voltages = ARRAY_SIZE(ldo_2_volts),
-			.enable_reg = BD718XX_REG_LDO2_VOLT,
-			.enable_mask = BD718XX_LDO_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_LDO2_VOLT,
-			.mask = BD718XX_LDO_SEL,
-			.val = BD718XX_LDO_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -558,15 +477,8 @@ static const struct bd718xx_regulator_data bd71847_regulators[] = {
 			.n_linear_ranges = ARRAY_SIZE(bd718xx_ldo3_volts),
 			.vsel_reg = BD718XX_REG_LDO3_VOLT,
 			.vsel_mask = BD718XX_LDO3_MASK,
-			.enable_reg = BD718XX_REG_LDO3_VOLT,
-			.enable_mask = BD718XX_LDO_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_LDO3_VOLT,
-			.mask = BD718XX_LDO_SEL,
-			.val = BD718XX_LDO_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -581,15 +493,8 @@ static const struct bd718xx_regulator_data bd71847_regulators[] = {
 			.n_linear_ranges = ARRAY_SIZE(bd718xx_ldo4_volts),
 			.vsel_reg = BD718XX_REG_LDO4_VOLT,
 			.vsel_mask = BD718XX_LDO4_MASK,
-			.enable_reg = BD718XX_REG_LDO4_VOLT,
-			.enable_mask = BD718XX_LDO_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_LDO4_VOLT,
-			.mask = BD718XX_LDO_SEL,
-			.val = BD718XX_LDO_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -607,15 +512,8 @@ static const struct bd718xx_regulator_data bd71847_regulators[] = {
 			.vsel_range_reg = BD718XX_REG_LDO5_VOLT,
 			.vsel_range_mask = BD71847_LDO5_RANGE_MASK,
 			.linear_range_selectors = bd71847_ldo5_volt_range_sel,
-			.enable_reg = BD718XX_REG_LDO5_VOLT,
-			.enable_mask = BD718XX_LDO_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_LDO5_VOLT,
-			.mask = BD718XX_LDO_SEL,
-			.val = BD718XX_LDO_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -632,15 +530,8 @@ static const struct bd718xx_regulator_data bd71847_regulators[] = {
 			.supply_name = "buck5",
 			.vsel_reg = BD718XX_REG_LDO6_VOLT,
 			.vsel_mask = BD718XX_LDO6_MASK,
-			.enable_reg = BD718XX_REG_LDO6_VOLT,
-			.enable_mask = BD718XX_LDO_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_LDO6_VOLT,
-			.mask = BD718XX_LDO_SEL,
-			.val = BD718XX_LDO_SEL,
-		},
 	},
 };
 
@@ -651,22 +542,15 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 			.of_match = of_match_ptr("BUCK1"),
 			.regulators_node = of_match_ptr("regulators"),
 			.id = BD718XX_BUCK1,
-			.ops = &bd718xx_dvs_buck_regulator_ops,
+			.ops = &bd718xx_dvs_buck12_regulator_ops,
 			.type = REGULATOR_VOLTAGE,
 			.n_voltages = BD718XX_DVS_BUCK_VOLTAGE_NUM,
 			.linear_ranges = bd718xx_dvs_buck_volts,
 			.n_linear_ranges = ARRAY_SIZE(bd718xx_dvs_buck_volts),
 			.vsel_reg = BD718XX_REG_BUCK1_VOLT_RUN,
 			.vsel_mask = DVS_BUCK_RUN_MASK,
-			.enable_reg = BD718XX_REG_BUCK1_CTRL,
-			.enable_mask = BD718XX_BUCK_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_BUCK1_CTRL,
-			.mask = BD718XX_BUCK_SEL,
-			.val = BD718XX_BUCK_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -674,22 +558,15 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 			.of_match = of_match_ptr("BUCK2"),
 			.regulators_node = of_match_ptr("regulators"),
 			.id = BD718XX_BUCK2,
-			.ops = &bd718xx_dvs_buck_regulator_ops,
+			.ops = &bd718xx_dvs_buck12_regulator_ops,
 			.type = REGULATOR_VOLTAGE,
 			.n_voltages = BD718XX_DVS_BUCK_VOLTAGE_NUM,
 			.linear_ranges = bd718xx_dvs_buck_volts,
 			.n_linear_ranges = ARRAY_SIZE(bd718xx_dvs_buck_volts),
 			.vsel_reg = BD718XX_REG_BUCK2_VOLT_RUN,
 			.vsel_mask = DVS_BUCK_RUN_MASK,
-			.enable_reg = BD718XX_REG_BUCK2_CTRL,
-			.enable_mask = BD718XX_BUCK_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_BUCK2_CTRL,
-			.mask = BD718XX_BUCK_SEL,
-			.val = BD718XX_BUCK_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -697,7 +574,7 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 			.of_match = of_match_ptr("BUCK3"),
 			.regulators_node = of_match_ptr("regulators"),
 			.id = BD718XX_BUCK3,
-			.ops = &bd718xx_dvs_buck_regulator_ops,
+			.ops = &bd71837_dvs_buck34_regulator_ops,
 			.type = REGULATOR_VOLTAGE,
 			.n_voltages = BD718XX_DVS_BUCK_VOLTAGE_NUM,
 			.linear_ranges = bd718xx_dvs_buck_volts,
@@ -708,11 +585,8 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 			.enable_mask = BD718XX_BUCK_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD71837_REG_BUCK3_CTRL,
-			.mask = BD718XX_BUCK_SEL,
-			.val = BD718XX_BUCK_SEL,
-		},
+		.additional_inits = bd71837_buck3_inits,
+		.additional_init_amnt = ARRAY_SIZE(bd71837_buck3_inits),
 	},
 	{
 		.desc = {
@@ -720,7 +594,7 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 			.of_match = of_match_ptr("BUCK4"),
 			.regulators_node = of_match_ptr("regulators"),
 			.id = BD718XX_BUCK4,
-			.ops = &bd718xx_dvs_buck_regulator_ops,
+			.ops = &bd71837_dvs_buck34_regulator_ops,
 			.type = REGULATOR_VOLTAGE,
 			.n_voltages = BD718XX_DVS_BUCK_VOLTAGE_NUM,
 			.linear_ranges = bd718xx_dvs_buck_volts,
@@ -731,11 +605,8 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 			.enable_mask = BD718XX_BUCK_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD71837_REG_BUCK4_CTRL,
-			.mask = BD718XX_BUCK_SEL,
-			.val = BD718XX_BUCK_SEL,
-		},
+		.additional_inits = bd71837_buck4_inits,
+		.additional_init_amnt = ARRAY_SIZE(bd71837_buck4_inits),
 	},
 	{
 		.desc = {
@@ -754,15 +625,8 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 			.vsel_range_reg = BD718XX_REG_1ST_NODVS_BUCK_VOLT,
 			.vsel_range_mask = BD71837_BUCK5_RANGE_MASK,
 			.linear_range_selectors = bd71837_buck5_volt_range_sel,
-			.enable_reg = BD718XX_REG_1ST_NODVS_BUCK_CTRL,
-			.enable_mask = BD718XX_BUCK_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_1ST_NODVS_BUCK_CTRL,
-			.mask = BD718XX_BUCK_SEL,
-			.val = BD718XX_BUCK_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -778,15 +642,8 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 				ARRAY_SIZE(bd71837_buck6_volts),
 			.vsel_reg = BD718XX_REG_2ND_NODVS_BUCK_VOLT,
 			.vsel_mask = BD71837_BUCK6_MASK,
-			.enable_reg = BD718XX_REG_2ND_NODVS_BUCK_CTRL,
-			.enable_mask = BD718XX_BUCK_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_2ND_NODVS_BUCK_CTRL,
-			.mask = BD718XX_BUCK_SEL,
-			.val = BD718XX_BUCK_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -800,15 +657,8 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 			.n_voltages = ARRAY_SIZE(bd718xx_3rd_nodvs_buck_volts),
 			.vsel_reg = BD718XX_REG_3RD_NODVS_BUCK_VOLT,
 			.vsel_mask = BD718XX_3RD_NODVS_BUCK_MASK,
-			.enable_reg = BD718XX_REG_3RD_NODVS_BUCK_CTRL,
-			.enable_mask = BD718XX_BUCK_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_3RD_NODVS_BUCK_CTRL,
-			.mask = BD718XX_BUCK_SEL,
-			.val = BD718XX_BUCK_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -824,15 +674,8 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 				ARRAY_SIZE(bd718xx_4th_nodvs_buck_volts),
 			.vsel_reg = BD718XX_REG_4TH_NODVS_BUCK_VOLT,
 			.vsel_mask = BD718XX_4TH_NODVS_BUCK_MASK,
-			.enable_reg = BD718XX_REG_4TH_NODVS_BUCK_CTRL,
-			.enable_mask = BD718XX_BUCK_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_4TH_NODVS_BUCK_CTRL,
-			.mask = BD718XX_BUCK_SEL,
-			.val = BD718XX_BUCK_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -850,15 +693,8 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 			.vsel_range_reg = BD718XX_REG_LDO1_VOLT,
 			.vsel_range_mask = BD718XX_LDO1_RANGE_MASK,
 			.linear_range_selectors = bd718xx_ldo1_volt_range_sel,
-			.enable_reg = BD718XX_REG_LDO1_VOLT,
-			.enable_mask = BD718XX_LDO_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_LDO1_VOLT,
-			.mask = BD718XX_LDO_SEL,
-			.val = BD718XX_LDO_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -872,15 +708,8 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 			.vsel_reg = BD718XX_REG_LDO2_VOLT,
 			.vsel_mask = BD718XX_LDO2_MASK,
 			.n_voltages = ARRAY_SIZE(ldo_2_volts),
-			.enable_reg = BD718XX_REG_LDO2_VOLT,
-			.enable_mask = BD718XX_LDO_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_LDO2_VOLT,
-			.mask = BD718XX_LDO_SEL,
-			.val = BD718XX_LDO_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -895,15 +724,8 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 			.n_linear_ranges = ARRAY_SIZE(bd718xx_ldo3_volts),
 			.vsel_reg = BD718XX_REG_LDO3_VOLT,
 			.vsel_mask = BD718XX_LDO3_MASK,
-			.enable_reg = BD718XX_REG_LDO3_VOLT,
-			.enable_mask = BD718XX_LDO_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_LDO3_VOLT,
-			.mask = BD718XX_LDO_SEL,
-			.val = BD718XX_LDO_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -918,15 +740,8 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 			.n_linear_ranges = ARRAY_SIZE(bd718xx_ldo4_volts),
 			.vsel_reg = BD718XX_REG_LDO4_VOLT,
 			.vsel_mask = BD718XX_LDO4_MASK,
-			.enable_reg = BD718XX_REG_LDO4_VOLT,
-			.enable_mask = BD718XX_LDO_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_LDO4_VOLT,
-			.mask = BD718XX_LDO_SEL,
-			.val = BD718XX_LDO_SEL,
-		},
 	},
 	{
 		.desc = {
@@ -943,15 +758,8 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 			.supply_name = "buck6",
 			.vsel_reg = BD718XX_REG_LDO5_VOLT,
 			.vsel_mask = BD71837_LDO5_MASK,
-			.enable_reg = BD718XX_REG_LDO5_VOLT,
-			.enable_mask = BD718XX_LDO_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_LDO5_VOLT,
-			.mask = BD718XX_LDO_SEL,
-			.val = BD718XX_LDO_SEL,
-		},
 		.additional_inits = bd71837_ldo5_inits,
 		.additional_init_amnt = ARRAY_SIZE(bd71837_ldo5_inits),
 	},
@@ -970,15 +778,8 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 			.supply_name = "buck7",
 			.vsel_reg = BD718XX_REG_LDO6_VOLT,
 			.vsel_mask = BD718XX_LDO6_MASK,
-			.enable_reg = BD718XX_REG_LDO6_VOLT,
-			.enable_mask = BD718XX_LDO_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD718XX_REG_LDO6_VOLT,
-			.mask = BD718XX_LDO_SEL,
-			.val = BD718XX_LDO_SEL,
-		},
 		.additional_inits = bd71837_ldo6_inits,
 		.additional_init_amnt = ARRAY_SIZE(bd71837_ldo6_inits),
 	},
@@ -995,15 +796,8 @@ static const struct bd718xx_regulator_data bd71837_regulators[] = {
 			.n_linear_ranges = ARRAY_SIZE(bd71837_ldo7_volts),
 			.vsel_reg = BD71837_REG_LDO7_VOLT,
 			.vsel_mask = BD71837_LDO7_MASK,
-			.enable_reg = BD71837_REG_LDO7_VOLT,
-			.enable_mask = BD718XX_LDO_EN,
 			.owner = THIS_MODULE,
 		},
-		.init = {
-			.reg = BD71837_REG_LDO7_VOLT,
-			.mask = BD718XX_LDO_SEL,
-			.val = BD718XX_LDO_SEL,
-		},
 	},
 };
 
@@ -1074,20 +868,6 @@ static int bd718xx_probe(struct platform_device *pdev)
 			err = PTR_ERR(rdev);
 			goto err;
 		}
-		/* Regulator register gets the regulator constraints and
-		 * applies them (set_machine_constraints). This should have
-		 * turned the control register(s) to correct values and we
-		 * can now switch the control from PMIC state machine to the
-		 * register interface
-		 */
-		err = regmap_update_bits(mfd->regmap, r->init.reg,
-					 r->init.mask, r->init.val);
-		if (err) {
-			dev_err(&pdev->dev,
-				"Failed to write BUCK/LDO SEL bit for (%s)\n",
-				desc->name);
-			goto err;
-		}
 		for (j = 0; j < r->additional_init_amnt; j++) {
 			err = regmap_update_bits(mfd->regmap,
 						 r->additional_inits[j].reg,
-- 
2.14.3

